import axios, { AxiosResponse } from 'axios';
import { ErrorHandler, APIError } from '../utils/errorHandler';
import { apiCache, generateCacheKey } from '../utils/cacheUtils';
import api from '../api/axios';
import { authService } from './authService';
import { API_BASE_URL, API_ENDPOINTS, getApiUrl } from '../proxy';
import type { 
  APIResponse, 
  DashboardData, 
  TeacherData,
  JobListing, 
  JobApplication, 
  TutoringRequestData,
  SchoolServiceData,
  UserProfile,
  PaginatedResponse,
  Activity,
  Notification
} from '../types/api';
import type { User, SignupData } from '../context/AuthContext';

// Define interface for login/signup response
interface LoginResponse {
  token: string;
  refreshToken?: string;
  user: User;
  expiresIn?: number;
}

// Remove local type declarations as they are now imported from ../types/api

// Create axios instance with default configurations
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000, // 10 seconds
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
  }
});

// Request Interceptor for adding authentication token
  apiClient.interceptors.request.use(
    config => {
      const token = localStorage.getItem('token');
      if (token) {
        config.headers['Authorization'] = `Bearer ${token}`;
      }
      return config;
    },
    error => Promise.reject(error)
  );

  // Response Interceptor for global error handling
  apiClient.interceptors.response.use(
    response => response,
    error => {
      // Log and handle errors consistently
      ErrorHandler.logError(error);

      if (error.response) {
        // Server responded with an error status
        switch (error.response.status) {
          case 400:
            throw new Error('Bad Request: Invalid data');
          case 401:
            // Unauthorized - clear token and redirect to login
            localStorage.removeItem('token');
            window.location.href = '/login';
            break;
          case 403:
            throw new Error('Forbidden: You do not have permission');
          case 404:
            throw new Error('Not Found: Resource does not exist');
          case 500:
            throw new Error('Server Error: Please try again later');
          default:
            throw new Error('An unexpected error occurred');
        }
      } else if (error.request) {
        // Request made but no response received
        throw new Error('Network Error: No response from server');
      } else {
        // Error in setting up the request
        throw new Error('Error: Request could not be sent');
      }

      return Promise.reject(error);
    }
  );

  // Logging utility for API calls
  const logApiCall = (method: string, url: string, data?: unknown): void => {
    console.log(`[API Call] ${method.toUpperCase()} ${url}`, data);
  };

  // API Service with strongly typed methods
  const apiServiceImpl = {
    // Teacher Registration
    registerTeacher: async (teacherData: TeacherData): Promise<AxiosResponse<any>> => {
      try {
        logApiCall('POST', '/teachers/register', teacherData);
        const response = await apiClient.post('/teachers/register', teacherData);
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error as Error);
        throw error;
      }
    },

    // Parent Tutoring Request
    submitTutoringRequest: async (requestData: TutoringRequestData): Promise<AxiosResponse<any>> => {
      try {
        logApiCall('POST', '/requests/tutoring', requestData);
        const response = await apiClient.post('/requests/tutoring', requestData);
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error as Error);
        throw error;
      }
    },

    // School Service Request
    submitSchoolServiceRequest: async (requestData: SchoolServiceData): Promise<AxiosResponse<any>> => {
      try {
        logApiCall('POST', '/requests/school-services', requestData);
        const response = await apiClient.post('/requests/school-services', requestData);
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error as Error);
        throw error;
      }
    },    // Authentication Services
    login: async (email: string, password: string, role: string): Promise<LoginResponse> => {
      try {
        const endpoint = API_ENDPOINTS.AUTH.LOGIN;
        logApiCall('POST', endpoint, { email, role });
        const response = await apiClient.post(endpoint, { email, password, role });
        // Store token and user info
        localStorage.setItem('token', response.data.token);
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error as Error);
        throw error;
      }
    },    signup: async (userData: SignupData): Promise<LoginResponse> => {
      try {
        const endpoint = API_ENDPOINTS.AUTH.SIGNUP;
        logApiCall('POST', endpoint, { email: userData.email, role: userData.role });
        const response = await apiClient.post(endpoint, userData);
        // Store token and user info
        localStorage.setItem('token', response.data.token);
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error as Error);
        throw error;
      }
    },    // Utility method to check authentication status
    checkAuthStatus: async (): Promise<{ isAuthenticated: boolean } | null> => {
      try {
        const response = await apiClient.get(API_ENDPOINTS.AUTH.STATUS);
        return response.data;
      } catch (_error: unknown) {
        // Clear token if not valid
        localStorage.removeItem('token');
        return null;
      }
    }
  };

// Export API Service
export const ApiService = apiServiceImpl;

export const apiService = {
  async getDashboard(): Promise<APIResponse<DashboardData>> {
    try {
      const user = authService.getCurrentUser();
      if (!user) {
        throw new APIError('User not authenticated');
      }
      
      const cacheKey = generateCacheKey(`/${user.role}/dashboard`);
      
      // Check cache first
      const cachedData = apiCache.get<APIResponse<DashboardData>>(cacheKey);
      if (cachedData) {
        return cachedData;
      }
      
      // If not cached, fetch from API
      const response = await api.get<APIResponse<DashboardData>>(`/${user.role}/dashboard`);
      
      // Cache the response (2 minutes TTL for dashboard data)
      apiCache.set(cacheKey, response.data, 2 * 60 * 1000);
      
      return response.data;
    } catch (error) {
      ErrorHandler.logError(error);
      throw new APIError('Failed to fetch dashboard data');
    }
  },

  async getNotifications(): Promise<APIResponse<Notification[]>> {
    try {
      const cacheKey = generateCacheKey('/user/notifications');
      
      // Use cache with shorter TTL for notifications
      const cachedData = apiCache.get<APIResponse<Notification[]>>(cacheKey);
      if (cachedData) {
        return cachedData;
      }
      
      const response = await api.get<APIResponse<Notification[]>>('/user/notifications');
      
      // Short cache time for notifications (30 seconds)
      apiCache.set(cacheKey, response.data, 30 * 1000);
      
      return response.data;
    } catch (error) {
      ErrorHandler.logError(error);
      throw new APIError('Failed to fetch notifications');
    }
  },

  async markNotificationAsRead(notificationId: string): Promise<APIResponse<{ success: boolean }>> {
    try {
      const response = await api.put<APIResponse<{ success: boolean }>>(`/user/notifications/${notificationId}/read`);
      
      // Invalidate notifications cache
      apiCache.delete('/user/notifications');
      
      return response.data;
    } catch (error) {
      ErrorHandler.logError(error);
      throw new APIError('Failed to mark notification as read');
    }
  },

  teacher: {
    async register(data: FormData): Promise<APIResponse<{ teacherId: string }>> {
      try {
        // Use FormData to handle file uploads
        const response = await api.post<APIResponse<{ teacherId: string }>>('/teacher/register', data, {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        });
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error);
        throw new APIError('Failed to register as teacher');
      }
    },

    async getJobListings(page = 1, pageSize = 10, filters?: Record<string, unknown>): Promise<PaginatedResponse<JobListing>> {
      try {
        const params = { page, pageSize, ...filters };
        const cacheKey = generateCacheKey('/teacher/jobs', params);
        
        // Check cache first (3 minute TTL for job listings)
        const cachedData = apiCache.get<PaginatedResponse<JobListing>>(cacheKey);
        if (cachedData) {
          return cachedData;
        }
        
        const response = await api.get<PaginatedResponse<JobListing>>('/teacher/jobs', { params });
        
        // Cache the response 
        apiCache.set(cacheKey, response.data, 3 * 60 * 1000);
        
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error);
        throw new APIError('Failed to fetch job listings');
      }
    },

    async getJobDetails(jobId: string): Promise<APIResponse<JobListing>> {
      try {
        const cacheKey = generateCacheKey(`/teacher/jobs/${jobId}`);
        
        const cachedData = apiCache.get<APIResponse<JobListing>>(cacheKey);
        if (cachedData) {
          return cachedData;
        }
        
        const response = await api.get<APIResponse<JobListing>>(`/teacher/jobs/${jobId}`);
        
        // Cache job details for 5 minutes
        apiCache.set(cacheKey, response.data, 5 * 60 * 1000);
        
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error);
        throw new APIError('Failed to fetch job details');
      }
    },

    async applyForJob(jobId: string, application: FormData): Promise<APIResponse<{ applicationId: string }>> {
      try {
        const response = await api.post<APIResponse<{ applicationId: string }>>(`/teacher/jobs/${jobId}/apply`, application, {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        });
        
        // Clear related caches
        apiCache.delete(generateCacheKey(`/teacher/jobs/${jobId}`));
        apiCache.delete(generateCacheKey('/teacher/jobs'));
        apiCache.delete(generateCacheKey('/teacher/applications'));
        
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error);
        throw new APIError('Failed to submit job application');
      }
    },
    
    async getApplications(): Promise<APIResponse<JobApplication[]>> {
      try {
        const cacheKey = generateCacheKey('/teacher/applications');
        
        const cachedData = apiCache.get<APIResponse<JobApplication[]>>(cacheKey);
        if (cachedData) {
          return cachedData;
        }
        
        const response = await api.get<APIResponse<JobApplication[]>>('/teacher/applications');
        
        // Cache for 2 minutes
        apiCache.set(cacheKey, response.data, 2 * 60 * 1000);
        
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error);
        throw new APIError('Failed to fetch your applications');
      }
    }
  },

  user: {
    async getProfile(): Promise<APIResponse<UserProfile>> {
      try {
        const cacheKey = generateCacheKey('/user/profile');
        
        const cachedData = apiCache.get<APIResponse<UserProfile>>(cacheKey);
        if (cachedData) {
          return cachedData;
        }
        
        const response = await api.get<APIResponse<UserProfile>>('/user/profile');
        
        // Cache profile for 5 minutes
        apiCache.set(cacheKey, response.data, 5 * 60 * 1000);
        
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error);
        throw new APIError('Failed to fetch user profile');
      }
    },

    async updateProfile(data: Partial<UserProfile>): Promise<APIResponse<UserProfile>> {
      try {
        const response = await api.put<APIResponse<UserProfile>>('/user/profile', data);
        
        // Update cache with new profile data
        apiCache.set(generateCacheKey('/user/profile'), response.data, 5 * 60 * 1000);
        
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error);
        throw new APIError('Failed to update user profile');
      }
    },

    async changePassword(data: { currentPassword: string; newPassword: string }): Promise<APIResponse<{ message: string }>> {
      try {
        const response = await api.put<APIResponse<{ message: string }>>('/user/password', data);
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error);
        throw new APIError('Failed to change password');
      }
    },
    
    async uploadProfilePicture(file: File): Promise<APIResponse<{ imageUrl: string }>> {
      try {
        const formData = new FormData();
        formData.append('profilePicture', file);
        
        const response = await api.post<APIResponse<{ imageUrl: string }>>('/user/profile-picture', formData, {
          headers: {
            'Content-Type': 'multipart/form-data'
          }
        });
        
        // Clear profile cache
        apiCache.delete(generateCacheKey('/user/profile'));
        
        return response.data;
      } catch (error) {
        ErrorHandler.logError(error);
        throw new APIError('Failed to upload profile picture');
      }
    }
  }
};

export default apiClient;

